'''
Function 1: Factorial Calculation
Description:
This function calculates the factorial of a number n. 
The factorial of n is the product of all positive integers less than or equal to n, denoted as n!. 
The factorial of n is defined as:

n! = n * (n-1) * (n-2) * ... * 1
Special case: 0! = 1
'''

#Pseudocode:

FUNCTION factorial(n)
    # Step 1: Validate Input
    IF n < 0 THEN
        PRINT "Invalid input. Factorial is not defined for negative numbers."
        RETURN -1
    ENDIF

    # Step 2: Base Case
    IF n = 0 OR n = 1 THEN
        RETURN 1
    ENDIF

    # Step 3: Recursive Case
    RETURN n * factorial(n - 1)
END FUNCTION




'''
Function 2: Fibonacci Number Calculation
Description:
This function calculates the nth Fibonacci number. The Fibonacci sequence is defined as:

F(0) = 0
F(1) = 1
For n â‰¥ 2, F(n) = F(n-1) + F(n-2)
The sequence starts as: 0, 1, 1, 2, 3, 5, 8, 13, ...
'''


#Pseudocode:

FUNCTION fibonacci(n)
    # Step 1: Validate Input
    IF n < 0 THEN
        PRINT "Invalid input. Fibonacci is not defined for negative numbers."
        RETURN -1
    ENDIF

    # Step 2: Base Cases
    IF n = 0 THEN
        RETURN 0
    ELSE IF n = 1 THEN
        RETURN 1
    ENDIF

    # Step 3: Recursive Case
    RETURN fibonacci(n - 1) + fibonacci(n - 2)
END FUNCTION



'''Modularity in Function Design
Explanation:

Factorial Function: The factorial function is modular and calculates the factorial for any non-negative integer. 
It checks for edge cases like negative inputs and provides recursive logic for normal cases.

Fibonacci Function: The Fibonacci function similarly provides a modular approach to calculating Fibonacci numbers with base cases for 0 and 1,
while using recursion to calculate the nth Fibonacci number for larger values.

Both functions are modular because they are designed to be reusable,
independent of the rest of the program, and can be used wherever factorial or Fibonacci calculation is required.


Benefits of Modularity in This Example:
Reusability: The factorial and Fibonacci functions can be reused in other parts of the program or 
in other projects without having to rewrite the logic.

Clarity: The functions clearly separate concerns: one calculates the factorial and the other calculates Fibonacci numbers, 
making the code easier to maintain and understand.

Testability: Each function can be tested independently to ensure that it works correctly, 

 '''